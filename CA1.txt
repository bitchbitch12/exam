----------------BISECTION--------------------------
from sympy import symbols
import sympy as sym

def func(x):
    return eval(eqn)
def bisection(a,b):
	if (func(a) * func(b) >= 0):
		print("You have not assumed right a and b\n")
		return
		
	c = a
	while ((b-a) >= 0.01):
		# Find middle point
		c = (a+b)/2
		# Check if middle point is root
		if (func(c) == 0.0):
			break
		# Decide the side to repeat the steps
		if (func(c)*func(a) < 0):
			b = c
		else:
			a = c			
	print("\nThe value of root is : ","%.4f"%c)
a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))
eqn = input("Enter the function: ")
bisection(a, b)

----------------------Newton Raphson Method----------------------
from sympy import symbols
import sympy as sym
import numpy as np
x = symbols('x')
def find_sol_newton(expr_n, x_0, x1):
    if x1 == x_0:
        print("Solution is using Newton-Raphson method: ",x1)
        return x1
    f_x0 = expr_n.subs(x, x_0)
    new_expr = expr_n.diff(x)
    f__x0 = new_expr.subs(x, x_0)
    x1 = float(x_0 - (f_x0/f__x0))
    find_sol_newton(expr_n, x1, x_0)
expr_n = eval(input("Enter the expression: "))
x_0 = int(input("Enter the value of x0: "))
find_sol_newton(expr_n, x_0, 0)

--------------------Regular Falsi Method-------------------------

from sympy import symbols
import sympy as sym
x = symbols('x')
def solve(expr, r):
    return expr.subs(x, r)
def find_sol_rf(a, b, expr):
    c = float(a * solve(expr, b) - b * solve(expr, a))/ (solve(expr, b) - solve(expr, a))
    if abs(solve(expr, c)) <= 0.005:
        print("Solution using Regular Falsi Method is : ",c)
        return c
    if solve(expr, c) * solve(expr, a) < 0:
        find_sol_rf(a, c, expr)
    else:
        find_sol_rf(c, b, expr)
expr_r = eval(input("Enter the expression: "))
a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))
find_sol_rf(a, b, expr)

---------------------Augmented Matrix---------------------------
from sympy import symbols
import sympy as sym
import numpy as np
from pprint import pprint
x, y = symbols("x, y")
def augmentedMatrix(N):
    mat = []
    for j in range(N):
        A = input("Enter Equation {} : ".format(j+1))
        row = []
        temp = 0
        for i in A:
            if temp == 0 and i.isalpha():
                A = A.replace(i, " 1 ")
            if i.isalpha():
                A = A.replace(i, "")
            if i in ['+', '=']: # -?
                A = A.replace(i, "")
                temp = 0
            if i.isnumeric():
                temp = 1
        mat.append([A])

    augmented_matrix = np.array(mat)
    print("\nAUGMENTED MATRIX\n", augmented_matrix)
N1 = int(input("Enter the total number of equations : "))
augmentedMatrix(N1)

-----------------------------REF and RREF---------------------
def ref(matrix, r , c):
    zero_list = [0]*c
    for i in range(r):
        if(matrix[i] != zero_list):
            continue
        else:
            for j in range(i+1,r):
                if(matrix[j]!=zero_list):
                    return False
    for i in range(r):
        for j in range(c):
            if(matrix[i][j]!=0):
                for k in range(i+1,r):
                    if(matrix[k][j]!=0):
                        return False
                break
    return True
def rref(matrix, r, c):
    for i in range(r):
        for j in range(c):
            if(matrix[i][j]!=0):
                if(matrix[i][j]==1):
                    for k in range(i+1,r):
                        l = list(matrix[:k])
                        if(sum(l[0])!=1):
                            return False
                        else:
                            break
            else:
                return False
    return True
n_rows = int(input("Number of rows: "))
n_cols = int(input("Number of columns: "))
matrix = []
print("Enter the entries row-wise: ")
for i in range(n_rows):
    a = []
    print("Enter the next row: ")
    for j in range(n_cols):
        a.append(int(input()))
    matrix.append(a)
print("The entered matrix is : ")
print(matrix)
             
k = ref(matrix,n_rows,n_cols)
if(k == True):
    m = rref(matrix, n_rows, n_cols)
    if(m == True):
        print("Entered matrix is in RREF and REF")
    else:
        print("Entered matrix is in REF and not RREF")
else:
    print("Entered matrix is not in REF")

----------------------Gauss Seidel---------------------------

def GaussSeidal(A, B, x, n):
    L = np.tril(A)
    U = A - L
    
    for i in range(n):
        x = np.dot(np.linalg.inv(L), B - np.dot(U, x))
        print("ITERATION --> {} : {}".format(i+1, x))
    
    return x

def getInput():
    A = eval(input("Enter the matrix A as a numpy array : "))
    B = eval(input("Enter the matrix B : "))
    x = eval(input("Enter the initial guesses for x : "))
    n = eval(input("Enter the number of iterations to perform : "))
    
    return A, B, x, n

A, B, x, n = getInput()
x = GaussSeidal(A, B, x, n)

print('\nA: \n', A)
print('\nB: \n', B) 
print("\nSolution using Gauss Seidal Method : \n", x)

-------------------------Gauss Jacobi--------------------------

from numpy import diag,array,zeros,diagflat,dot
from pprint import pprint

def jacobi(A,b,N=25,x=None):                                                                                                                                                  
    if x is None:
        x = zeros(len(A[0]))                                                                                                                                                          
    D = diag(A)
    R = A - diagflat(D)                                                                                                                                                                     
    for i in range(N):
        x = (b - dot(R,x)) / D
    return x
A = eval(input("Enter the matrix A as a numpy array : "))
b = eval(input("Enter the matrix B : "))
guess = array([1.0,1.0])
sol = jacobi(A,b,N=25,x=guess)

print("A:")
pprint(A)

print("b:")
pprint(B)

print("x:")
pprint(sol)

------------------------------consistency-----------------------
def PrintMatrix(a, n):
    for i in range(0, n):
        for j in range(0, n+1):
            print(a[i][j], end = " ")
        print("\n")

def PerformOperation(a, n):
    i = 0
    j = 0
    k = 0
    c = 0
    flag = 0
    m = 0
    pro = 0.0
    for i in range(0, n):
        if (a[i][i] == 0):
            c = 1;
            while ((i + c) < n and a[i + c][i] == 0):
                c += 1;           
            if ((i + c) == n):
                flag = 1;
                break;
            j = i
            for k in range(0, n+1):
                temp = a[j][k]
                a[j][k] = a[j+c][k]
                a[j+c][k] = temp
        for j in range(0, n):             
            # Excluding all i == j
            if (i != j):
                 #Converting Matrix to reduced row echelon form(diagonal matrix)
                pro = float(a[j][i] / a[i][i]);
                for k in range(0, n+1):                
                    a[j][k] = a[j][k] - (a[i][k]) * pro;               
    return flag
 
# Function to print the desired result
# if unique solutions exists, otherwise
# prints no solution or infinite solutions
# epending upon the input given.
def PrintResult(a, n, flag):
    print("Result is : ") 
    if (flag == 2):   
        print("Infinite Solutions Exists") 
    elif (flag == 3):  
        print("No Solution Exists")
    # Printing the solution by dividing constants by their respective diagonal elements
    else:
        for i in range(0, n):        
            print(a[i][n] / a[i][i])

# To check whether infinite solutions exists or no solution exists
def CheckConsistency(a, n, flag):
    # flag == 2 for infinite solution
    # flag == 3 for No solution
    flag = 3
    for i in range(0, n):
        sum = 0
        for j in range(0, n):       
            sum += a[i][j]
        if (sum == a[i][j]):
            flag = 2
    return flag;


a = [[0, 1, -2, 3],
    [1, -3, 4, -6]];

n = len(a)
flag = 0

flag = PerformOperation(a, n);

if (flag == 1):    
    flag = CheckConsistency(a, n, flag);   

print("Final Augmented Matrix is : ")
PrintMatrix(a, n);
PrintResult(a, n, flag);
print("Rank of the matrix is: ", np.linalg.matrix_rank(a))

-------------------------------Cholesky-------------------------
import math
MAX = 100;
 
def Cholesky_Decomposition(matrix, n):
 
    lower = [[0 for x in range(n + 1)]
                for y in range(n + 1)];
    for i in range(n):
        for j in range(i + 1):
            sum1 = 0;
            if (j == i):
                for k in range(j):
                    sum1 += pow(lower[j][k], 2);
                lower[j][j] = int(math.sqrt(matrix[j][j] - sum1));
            else:
                for k in range(j):
                    sum1 += (lower[i][k] *lower[j][k]);
                if(lower[j][j] > 0):
                    lower[i][j] = int((matrix[i][j] - sum1) /
                                               lower[j][j]);
    print("Lower Triangular\t\tTranspose");
    for i in range(n):
        for j in range(n):
            print(lower[i][j], end = "\t");
        print("", end = "\t");
        for j in range(n):
            print(lower[j][i], end = "\t");
        print("");

n = 3;
matrix = [[6, 3, 4, 8], [3, 6, 5, 1], [4, 5, 10, 7], [8, 1, 7, 25]]
          
Cholesky_Decomposition(matrix, n)

---------------------------LU--------------------------------
MAX = 100


def luDecomposition(mat, n):

	lower = [[0 for x in range(n)]
			for y in range(n)]
	upper = [[0 for x in range(n)]
			for y in range(n)]

	# Decomposing matrix into Upper
	# and Lower triangular matrix
	for i in range(n):

		# Upper Triangular
		for k in range(i, n):

			# Summation of L(i, j) * U(j, k)
			sum = 0
			for j in range(i):
				sum += (lower[i][j] * upper[j][k])

			# Evaluating U(i, k)
			upper[i][k] = mat[i][k] - sum

		# Lower Triangular
		for k in range(i, n):
			if (i == k):
				lower[i][i] = 1 # Diagonal as 1
			else:

				# Summation of L(k, j) * U(j, i)
				sum = 0
				for j in range(i):
					sum += (lower[k][j] * upper[j][i])

				# Evaluating L(k, i)
				lower[k][i] = int((mat[k][i] - sum) /
								upper[i][i])

	# setw is for displaying nicely
	print("Lower Triangular\t\tUpper Triangular")

	# Displaying the result :
	for i in range(n):

		# Lower
		for j in range(n):
			print(lower[i][j], end="\t")
		print("", end="\t")

		# Upper
		for j in range(n):
			print(upper[i][j], end="\t")
		print("")


# Driver code
mat = [[2, -1, -2],
	[-4, 6, 3],
	[-4, -2, 8]]

luDecomposition(mat, 3)


-------------------------------Crout's----------------------------

from cmath import e

def crout(A):
    """
    Returns the lower-triangular matrix L and the unit upper-triangular
    matrix U such that L*U = the given matrix A.
    The computation uses Crout's Algorithm to perform LU decomposition on A.
    INPUT:
        - A: list; the square matrix to decompose
    OUTPUT:
        - list; the matrix L followed by the matrix U
    """
    # This is Crout's Algorithm.
    n = len(A)
    L = [[0] * n for i in range(n)]
    U = [[0] * n for i in range(n)]
    for j in range(n):
        U[j][j] = 1             # set the j,j-th entry of U to 1
        for i in range(j, n):  # starting at L[j][j], solve j-th column of L
            alpha = float(A[i][j])
            for k in range(j):
                alpha -= L[i][k]*U[k][j]
            L[i][j] = alpha
        for i in range(j+1, n):# starting at U[j][j+1], solve j-th row of U
            tempU = float(A[j][i])
            for k in range(j):
                tempU -= L[j][k]*U[k][i]
            if int(L[j][j]) == 0:
                L[j][j] = e-40
            U[j][i] = tempU/L[j][j]
    return [L, U]

a = [[2, -1, -2],
	[-4, 6, 3],
	[-4, -2, 8]]
crout(a)

--------------ps3----------------------
Crout method

def crout(A: np.ndarray):
    L = np.zeros((3, 3))
    U = np.zeros((3, 3))
    for k in range(0, 3):
        U[k, k] = 1
        for j in range(k, 3):
            sum0 = sum(L[k, s] * U[s, j] for s in range(1, k-1))
            L[k, j] = A[k, j] - sum0
        for j in range(k, 3):
            sum1 = sum(L[k, s] * U[s, j] for s in range(1, k-1))
            U[k, j] = (A[k, j] - sum1) / L[k, k]
    print(" L =", '\n', L, '\n', " U =", '\n', U)
    return L, U

A = np.array([[60.0, 30.0, 20.0], [30.0, 20.0, 15.0], [20.0, 15.0, 12.0]])
crout(A)

---------------------matrix inverse ----------------------
# matrix inverse
def transposeMatrix(m):
    return list(map(list,zip(*m)))

def getMatrixMinor(m,i,j):
    return [row[:j] + row[j+1:] for row in (m[:i]+m[i+1:])]

def getMatrixDeterminant(m):
    #base case for 2x2 matrix
    if len(m) == 2:
        return m[0][0]*m[1][1]-m[0][1]*m[1][0]

    determinant = 0
    for c in range(len(m)):
        determinant += ((-1)**c)*m[0][c]*getMatrixDeterminant(getMatrixMinor(m,0,c))
    return determinant

def getMatrixInverse(m):
    determinant = getMatrixDeterminant(m)
    #special case for 2x2 matrix:
    if len(m) == 2:
        return [[m[1][1]/determinant, -1*m[0][1]/determinant],
                [-1*m[1][0]/determinant, m[0][0]/determinant]]

    #find matrix of cofactors
    cofactors = []
    for r in range(len(m)):
        cofactorRow = []
        for c in range(len(m)):
            minor = getMatrixMinor(m,r,c)
            cofactorRow.append(((-1)**(r+c)) * getMatrixDeterminant(minor))
        cofactors.append(cofactorRow)
    cofactors = transposeMatrix(cofactors)
    for r in range(len(cofactors)):
        for c in range(len(cofactors)):
            cofactors[r][c] = cofactors[r][c]/determinant
    return cofactors


mat = [[2, -1, -2],
       [-4, 6, 3],
       [-4, -2, 8]]
print("Matrix : ")
pprint(mat)
print("Inverse Matrix")
pprint(getMatrixInverse(mat))


----------cholesky----------------
def cholesky(A):    
    n = len(A)
    L = [[0.0] * n for i in range(n)]
    for i in range(n):
        for k in range(i+1):
            tmp_sum = sum(L[i][j] * L[k][j] for j in range(k))
            if (i == k): 
                L[i][k] = sqrt(A[i][i] - tmp_sum)
            else:
                L[i][k] = (1.0 / L[k][k] * (A[i][k] - tmp_sum)) 
    return L


A = [[6, 3, 4, 8], [3, 6, 5, 1], [4, 5, 10, 7], [8, 1, 7, 25]]
L = cholesky(A)

print("A:")
print(A)

print("L:")
print(L)